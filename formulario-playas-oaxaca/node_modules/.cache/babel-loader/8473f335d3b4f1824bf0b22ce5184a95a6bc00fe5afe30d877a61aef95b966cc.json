{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromPromise;\nconst path = require('path');\nconst fs = require('../fs');\nconst mkdir = require('../mkdirs');\nasync function createFile(file) {\n  let stats;\n  try {\n    stats = await fs.stat(file);\n  } catch {}\n  if (stats && stats.isFile()) return;\n  const dir = path.dirname(file);\n  let dirStats = null;\n  try {\n    dirStats = await fs.stat(dir);\n  } catch (err) {\n    // if the directory doesn't exist, make it\n    if (err.code === 'ENOENT') {\n      await mkdir.mkdirs(dir);\n      await fs.writeFile(file, '');\n      return;\n    } else {\n      throw err;\n    }\n  }\n  if (dirStats.isDirectory()) {\n    await fs.writeFile(file, '');\n  } else {\n    // parent is not a directory\n    // This is just to cause an internal ENOTDIR error to be thrown\n    await fs.readdir(dir);\n  }\n}\nfunction createFileSync(file) {\n  let stats;\n  try {\n    stats = fs.statSync(file);\n  } catch {}\n  if (stats && stats.isFile()) return;\n  const dir = path.dirname(file);\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir);\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir);else throw err;\n  }\n  fs.writeFileSync(file, '');\n}\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n};","map":{"version":3,"names":["u","require","fromPromise","path","fs","mkdir","createFile","file","stats","stat","isFile","dir","dirname","dirStats","err","code","mkdirs","writeFile","isDirectory","readdir","createFileSync","statSync","readdirSync","mkdirsSync","writeFileSync","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/ensure/file.js"],"sourcesContent":["'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\n\nasync function createFile (file) {\n  let stats\n  try {\n    stats = await fs.stat(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n\n  let dirStats = null\n  try {\n    dirStats = await fs.stat(dir)\n  } catch (err) {\n    // if the directory doesn't exist, make it\n    if (err.code === 'ENOENT') {\n      await mkdir.mkdirs(dir)\n      await fs.writeFile(file, '')\n      return\n    } else {\n      throw err\n    }\n  }\n\n  if (dirStats.isDirectory()) {\n    await fs.writeFile(file, '')\n  } else {\n    // parent is not a directory\n    // This is just to cause an internal ENOTDIR error to be thrown\n    await fs.readdir(dir)\n  }\n}\n\nfunction createFileSync (file) {\n  let stats\n  try {\n    stats = fs.statSync(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir)\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)\n    else throw err\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC,CAACC,WAAW;AAC7C,MAAMC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC3B,MAAMI,KAAK,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAElC,eAAeK,UAAUA,CAAEC,IAAI,EAAE;EAC/B,IAAIC,KAAK;EACT,IAAI;IACFA,KAAK,GAAG,MAAMJ,EAAE,CAACK,IAAI,CAACF,IAAI,CAAC;EAC7B,CAAC,CAAC,MAAM,CAAE;EACV,IAAIC,KAAK,IAAIA,KAAK,CAACE,MAAM,CAAC,CAAC,EAAE;EAE7B,MAAMC,GAAG,GAAGR,IAAI,CAACS,OAAO,CAACL,IAAI,CAAC;EAE9B,IAAIM,QAAQ,GAAG,IAAI;EACnB,IAAI;IACFA,QAAQ,GAAG,MAAMT,EAAE,CAACK,IAAI,CAACE,GAAG,CAAC;EAC/B,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ;IACA,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;MACzB,MAAMV,KAAK,CAACW,MAAM,CAACL,GAAG,CAAC;MACvB,MAAMP,EAAE,CAACa,SAAS,CAACV,IAAI,EAAE,EAAE,CAAC;MAC5B;IACF,CAAC,MAAM;MACL,MAAMO,GAAG;IACX;EACF;EAEA,IAAID,QAAQ,CAACK,WAAW,CAAC,CAAC,EAAE;IAC1B,MAAMd,EAAE,CAACa,SAAS,CAACV,IAAI,EAAE,EAAE,CAAC;EAC9B,CAAC,MAAM;IACL;IACA;IACA,MAAMH,EAAE,CAACe,OAAO,CAACR,GAAG,CAAC;EACvB;AACF;AAEA,SAASS,cAAcA,CAAEb,IAAI,EAAE;EAC7B,IAAIC,KAAK;EACT,IAAI;IACFA,KAAK,GAAGJ,EAAE,CAACiB,QAAQ,CAACd,IAAI,CAAC;EAC3B,CAAC,CAAC,MAAM,CAAE;EACV,IAAIC,KAAK,IAAIA,KAAK,CAACE,MAAM,CAAC,CAAC,EAAE;EAE7B,MAAMC,GAAG,GAAGR,IAAI,CAACS,OAAO,CAACL,IAAI,CAAC;EAC9B,IAAI;IACF,IAAI,CAACH,EAAE,CAACiB,QAAQ,CAACV,GAAG,CAAC,CAACO,WAAW,CAAC,CAAC,EAAE;MACnC;MACA;MACAd,EAAE,CAACkB,WAAW,CAACX,GAAG,CAAC;IACrB;EACF,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ;IACA,IAAIA,GAAG,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAEV,KAAK,CAACkB,UAAU,CAACZ,GAAG,CAAC,MAClD,MAAMG,GAAG;EAChB;EAEAV,EAAE,CAACoB,aAAa,CAACjB,IAAI,EAAE,EAAE,CAAC;AAC5B;AAEAkB,MAAM,CAACC,OAAO,GAAG;EACfpB,UAAU,EAAEN,CAAC,CAACM,UAAU,CAAC;EACzBc;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}