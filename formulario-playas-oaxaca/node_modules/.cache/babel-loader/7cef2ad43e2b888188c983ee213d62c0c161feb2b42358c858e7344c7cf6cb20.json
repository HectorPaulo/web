{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromPromise;\nconst path = require('path');\nconst fs = require('../fs');\nconst {\n  mkdirs,\n  mkdirsSync\n} = require('../mkdirs');\nconst {\n  symlinkPaths,\n  symlinkPathsSync\n} = require('./symlink-paths');\nconst {\n  symlinkType,\n  symlinkTypeSync\n} = require('./symlink-type');\nconst {\n  pathExists\n} = require('../path-exists');\nconst {\n  areIdentical\n} = require('../util/stat');\nasync function createSymlink(srcpath, dstpath, type) {\n  let stats;\n  try {\n    stats = await fs.lstat(dstpath);\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const [srcStat, dstStat] = await Promise.all([fs.stat(srcpath), fs.stat(dstpath)]);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n  const relative = await symlinkPaths(srcpath, dstpath);\n  srcpath = relative.toDst;\n  const toType = await symlinkType(relative.toCwd, type);\n  const dir = path.dirname(dstpath);\n  if (!(await pathExists(dir))) {\n    await mkdirs(dir);\n  }\n  return fs.symlink(srcpath, dstpath, toType);\n}\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  let stats;\n  try {\n    stats = fs.lstatSync(dstpath);\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath);\n    const dstStat = fs.statSync(dstpath);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n  const relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  const dir = path.dirname(dstpath);\n  const exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n};","map":{"version":3,"names":["u","require","fromPromise","path","fs","mkdirs","mkdirsSync","symlinkPaths","symlinkPathsSync","symlinkType","symlinkTypeSync","pathExists","areIdentical","createSymlink","srcpath","dstpath","type","stats","lstat","isSymbolicLink","srcStat","dstStat","Promise","all","stat","relative","toDst","toType","toCwd","dir","dirname","symlink","createSymlinkSync","lstatSync","statSync","exists","existsSync","symlinkSync","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/ensure/symlink.js"],"sourcesContent":["'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\n\nconst { mkdirs, mkdirsSync } = require('../mkdirs')\n\nconst { symlinkPaths, symlinkPathsSync } = require('./symlink-paths')\nconst { symlinkType, symlinkTypeSync } = require('./symlink-type')\n\nconst { pathExists } = require('../path-exists')\n\nconst { areIdentical } = require('../util/stat')\n\nasync function createSymlink (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = await fs.lstat(dstpath)\n  } catch { }\n\n  if (stats && stats.isSymbolicLink()) {\n    const [srcStat, dstStat] = await Promise.all([\n      fs.stat(srcpath),\n      fs.stat(dstpath)\n    ])\n\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = await symlinkPaths(srcpath, dstpath)\n  srcpath = relative.toDst\n  const toType = await symlinkType(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n\n  if (!(await pathExists(dir))) {\n    await mkdirs(dir)\n  }\n\n  return fs.symlink(srcpath, dstpath, toType)\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch { }\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC,CAACC,WAAW;AAC7C,MAAMC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC;AAE3B,MAAM;EAAEI,MAAM;EAAEC;AAAW,CAAC,GAAGL,OAAO,CAAC,WAAW,CAAC;AAEnD,MAAM;EAAEM,YAAY;EAAEC;AAAiB,CAAC,GAAGP,OAAO,CAAC,iBAAiB,CAAC;AACrE,MAAM;EAAEQ,WAAW;EAAEC;AAAgB,CAAC,GAAGT,OAAO,CAAC,gBAAgB,CAAC;AAElE,MAAM;EAAEU;AAAW,CAAC,GAAGV,OAAO,CAAC,gBAAgB,CAAC;AAEhD,MAAM;EAAEW;AAAa,CAAC,GAAGX,OAAO,CAAC,cAAc,CAAC;AAEhD,eAAeY,aAAaA,CAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAE;EACpD,IAAIC,KAAK;EACT,IAAI;IACFA,KAAK,GAAG,MAAMb,EAAE,CAACc,KAAK,CAACH,OAAO,CAAC;EACjC,CAAC,CAAC,MAAM,CAAE;EAEV,IAAIE,KAAK,IAAIA,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;IACnC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3CnB,EAAE,CAACoB,IAAI,CAACV,OAAO,CAAC,EAChBV,EAAE,CAACoB,IAAI,CAACT,OAAO,CAAC,CACjB,CAAC;IAEF,IAAIH,YAAY,CAACQ,OAAO,EAAEC,OAAO,CAAC,EAAE;EACtC;EAEA,MAAMI,QAAQ,GAAG,MAAMlB,YAAY,CAACO,OAAO,EAAEC,OAAO,CAAC;EACrDD,OAAO,GAAGW,QAAQ,CAACC,KAAK;EACxB,MAAMC,MAAM,GAAG,MAAMlB,WAAW,CAACgB,QAAQ,CAACG,KAAK,EAAEZ,IAAI,CAAC;EACtD,MAAMa,GAAG,GAAG1B,IAAI,CAAC2B,OAAO,CAACf,OAAO,CAAC;EAEjC,IAAI,EAAE,MAAMJ,UAAU,CAACkB,GAAG,CAAC,CAAC,EAAE;IAC5B,MAAMxB,MAAM,CAACwB,GAAG,CAAC;EACnB;EAEA,OAAOzB,EAAE,CAAC2B,OAAO,CAACjB,OAAO,EAAEC,OAAO,EAAEY,MAAM,CAAC;AAC7C;AAEA,SAASK,iBAAiBA,CAAElB,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAClD,IAAIC,KAAK;EACT,IAAI;IACFA,KAAK,GAAGb,EAAE,CAAC6B,SAAS,CAAClB,OAAO,CAAC;EAC/B,CAAC,CAAC,MAAM,CAAE;EACV,IAAIE,KAAK,IAAIA,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;IACnC,MAAMC,OAAO,GAAGhB,EAAE,CAAC8B,QAAQ,CAACpB,OAAO,CAAC;IACpC,MAAMO,OAAO,GAAGjB,EAAE,CAAC8B,QAAQ,CAACnB,OAAO,CAAC;IACpC,IAAIH,YAAY,CAACQ,OAAO,EAAEC,OAAO,CAAC,EAAE;EACtC;EAEA,MAAMI,QAAQ,GAAGjB,gBAAgB,CAACM,OAAO,EAAEC,OAAO,CAAC;EACnDD,OAAO,GAAGW,QAAQ,CAACC,KAAK;EACxBV,IAAI,GAAGN,eAAe,CAACe,QAAQ,CAACG,KAAK,EAAEZ,IAAI,CAAC;EAC5C,MAAMa,GAAG,GAAG1B,IAAI,CAAC2B,OAAO,CAACf,OAAO,CAAC;EACjC,MAAMoB,MAAM,GAAG/B,EAAE,CAACgC,UAAU,CAACP,GAAG,CAAC;EACjC,IAAIM,MAAM,EAAE,OAAO/B,EAAE,CAACiC,WAAW,CAACvB,OAAO,EAAEC,OAAO,EAAEC,IAAI,CAAC;EACzDV,UAAU,CAACuB,GAAG,CAAC;EACf,OAAOzB,EAAE,CAACiC,WAAW,CAACvB,OAAO,EAAEC,OAAO,EAAEC,IAAI,CAAC;AAC/C;AAEAsB,MAAM,CAACC,OAAO,GAAG;EACf1B,aAAa,EAAEb,CAAC,CAACa,aAAa,CAAC;EAC/BmB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}