{"ast":null,"code":"const express = require('express');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst cors = require('cors');\nconst app = express();\nconst port = 3001;\n\n// Habilitar CORS y parsing de JSON\napp.use(cors());\napp.use(express.json());\nconst usersFilePath = path.join(__dirname, 'src', 'Components', 'Data', 'users.json');\n\n// Funci贸n para obtener usuarios del archivo JSON\nconst getUsers = async () => {\n  try {\n    const data = await fs.readFile(usersFilePath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error al leer el archivo de usuarios:', error);\n    return [];\n  }\n};\n\n// Funci贸n para guardar usuarios en el archivo JSON\nconst saveUsers = async users => {\n  try {\n    await fs.writeFile(usersFilePath, JSON.stringify(users, null, 2));\n  } catch (error) {\n    console.error('Error al guardar usuarios en el archivo:', error);\n  }\n};\n\n// Ruta para registrar un nuevo usuario\napp.post('/register', async (req, res) => {\n  const {\n    userId,\n    password\n  } = req.body;\n  const users = await getUsers();\n  const existingUser = users.find(user => user.userId === userId);\n  if (existingUser) {\n    return res.status(400).json({\n      message: 'El usuario ya existe'\n    });\n  }\n  try {\n    const newUser = {\n      userId,\n      password\n    };\n    users.push(newUser);\n    await saveUsers(users);\n    return res.status(200).json({\n      message: 'Registro exitoso'\n    });\n  } catch (error) {\n    console.error('Error al registrar usuario:', error);\n    return res.status(500).json({\n      message: 'Error interno del servidor'\n    });\n  }\n});\n\n// Iniciar el servidor\napp.listen(port, () => {\n  console.log(`Servidor corriendo en http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","path","fs","promises","cors","app","port","use","json","usersFilePath","join","__dirname","getUsers","data","readFile","JSON","parse","error","console","saveUsers","users","writeFile","stringify","post","req","res","userId","password","body","existingUser","find","user","status","message","newUser","push","listen","log"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/src/Components/RegisterForm/RegisterForm.jsx"],"sourcesContent":["const express = require('express');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst cors = require('cors');\n\nconst app = express();\nconst port = 3001;\n\n// Habilitar CORS y parsing de JSON\napp.use(cors());\napp.use(express.json());\n\nconst usersFilePath = path.join(__dirname, 'src', 'Components', 'Data', 'users.json');\n\n// Funci贸n para obtener usuarios del archivo JSON\nconst getUsers = async () => {\n  try {\n    const data = await fs.readFile(usersFilePath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error al leer el archivo de usuarios:', error);\n    return [];\n  }\n};\n\n// Funci贸n para guardar usuarios en el archivo JSON\nconst saveUsers = async (users) => {\n  try {\n    await fs.writeFile(usersFilePath, JSON.stringify(users, null, 2));\n  } catch (error) {\n    console.error('Error al guardar usuarios en el archivo:', error);\n  }\n};\n\n// Ruta para registrar un nuevo usuario\napp.post('/register', async (req, res) => {\n  const { userId, password } = req.body;\n\n  const users = await getUsers();\n  const existingUser = users.find(user => user.userId === userId);\n  if (existingUser) {\n    return res.status(400).json({ message: 'El usuario ya existe' });\n  }\n\n  try {\n    const newUser = { userId, password };\n    users.push(newUser);\n    await saveUsers(users);\n    return res.status(200).json({ message: 'Registro exitoso' });\n  } catch (error) {\n    console.error('Error al registrar usuario:', error);\n    return res.status(500).json({ message: 'Error interno del servidor' });\n  }\n});\n\n// Iniciar el servidor\napp.listen(port, () => {\n  console.log(`Servidor corriendo en http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC,CAACG,QAAQ;AACjC,MAAMC,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACR,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;AAEvB,MAAMC,aAAa,GAAGR,IAAI,CAACS,IAAI,CAACC,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,CAAC;;AAErF;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMX,EAAE,CAACY,QAAQ,CAACL,aAAa,EAAE,OAAO,CAAC;IACtD,OAAOM,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EACzB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAME,SAAS,GAAG,MAAOC,KAAK,IAAK;EACjC,IAAI;IACF,MAAMlB,EAAE,CAACmB,SAAS,CAACZ,aAAa,EAAEM,IAAI,CAACO,SAAS,CAACF,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;EAClE;AACF,CAAC;;AAED;AACAZ,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAErC,MAAMR,KAAK,GAAG,MAAMR,QAAQ,CAAC,CAAC;EAC9B,MAAMiB,YAAY,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,MAAM,KAAKA,MAAM,CAAC;EAC/D,IAAIG,YAAY,EAAE;IAChB,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAAuB,CAAC,CAAC;EAClE;EAEA,IAAI;IACF,MAAMC,OAAO,GAAG;MAAER,MAAM;MAAEC;IAAS,CAAC;IACpCP,KAAK,CAACe,IAAI,CAACD,OAAO,CAAC;IACnB,MAAMf,SAAS,CAACC,KAAK,CAAC;IACtB,OAAOK,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAAmB,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAOQ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA6B,CAAC,CAAC;EACxE;AACF,CAAC,CAAC;;AAEF;AACA5B,GAAG,CAAC+B,MAAM,CAAC9B,IAAI,EAAE,MAAM;EACrBY,OAAO,CAACmB,GAAG,CAAE,0CAAyC/B,IAAK,EAAC,CAAC;AAC/D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}