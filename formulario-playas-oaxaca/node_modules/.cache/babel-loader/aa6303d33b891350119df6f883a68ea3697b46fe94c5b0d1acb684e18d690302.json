{"ast":null,"code":"'use strict';\n\nconst fs = require('../fs');\nconst path = require('path');\nconst {\n  copy\n} = require('../copy');\nconst {\n  remove\n} = require('../remove');\nconst {\n  mkdirp\n} = require('../mkdirs');\nconst {\n  pathExists\n} = require('../path-exists');\nconst stat = require('../util/stat');\nasync function move(src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false;\n  const {\n    srcStat,\n    isChangingCase = false\n  } = await stat.checkPaths(src, dest, 'move', opts);\n  await stat.checkParentPaths(src, srcStat, dest, 'move');\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest);\n  const parsedParentPath = path.parse(destParent);\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent);\n  }\n  return doRename(src, dest, overwrite, isChangingCase);\n}\nasync function doRename(src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest);\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.');\n    }\n  }\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest);\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err;\n    }\n    await moveAcrossDevice(src, dest, overwrite);\n  }\n}\nasync function moveAcrossDevice(src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  };\n  await copy(src, dest, opts);\n  return remove(src);\n}\nmodule.exports = move;","map":{"version":3,"names":["fs","require","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","overwrite","clobber","srcStat","isChangingCase","checkPaths","checkParentPaths","destParent","dirname","parsedParentPath","parse","root","doRename","Error","rename","err","code","moveAcrossDevice","errorOnExist","preserveTimestamps","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/move/move.js"],"sourcesContent":["'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { copy } = require('../copy')\nconst { remove } = require('../remove')\nconst { mkdirp } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst stat = require('../util/stat')\n\nasync function move (src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'move')\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest)\n  const parsedParentPath = path.parse(destParent)\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent)\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nasync function doRename (src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest)\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.')\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err\n    }\n    await moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nasync function moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n\n  await copy(src, dest, opts)\n  return remove(src)\n}\n\nmodule.exports = move\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC3B,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAK,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AACnC,MAAM;EAAEG;AAAO,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;AACvC,MAAM;EAAEI;AAAO,CAAC,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACvC,MAAM;EAAEK;AAAW,CAAC,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMM,IAAI,GAAGN,OAAO,CAAC,cAAc,CAAC;AAEpC,eAAeO,IAAIA,CAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACzC,MAAMC,SAAS,GAAGD,IAAI,CAACC,SAAS,IAAID,IAAI,CAACE,OAAO,IAAI,KAAK;EAEzD,MAAM;IAAEC,OAAO;IAAEC,cAAc,GAAG;EAAM,CAAC,GAAG,MAAMR,IAAI,CAACS,UAAU,CAACP,GAAG,EAAEC,IAAI,EAAE,MAAM,EAAEC,IAAI,CAAC;EAE1F,MAAMJ,IAAI,CAACU,gBAAgB,CAACR,GAAG,EAAEK,OAAO,EAAEJ,IAAI,EAAE,MAAM,CAAC;;EAEvD;EACA,MAAMQ,UAAU,GAAGhB,IAAI,CAACiB,OAAO,CAACT,IAAI,CAAC;EACrC,MAAMU,gBAAgB,GAAGlB,IAAI,CAACmB,KAAK,CAACH,UAAU,CAAC;EAC/C,IAAIE,gBAAgB,CAACE,IAAI,KAAKJ,UAAU,EAAE;IACxC,MAAMb,MAAM,CAACa,UAAU,CAAC;EAC1B;EAEA,OAAOK,QAAQ,CAACd,GAAG,EAAEC,IAAI,EAAEE,SAAS,EAAEG,cAAc,CAAC;AACvD;AAEA,eAAeQ,QAAQA,CAAEd,GAAG,EAAEC,IAAI,EAAEE,SAAS,EAAEG,cAAc,EAAE;EAC7D,IAAI,CAACA,cAAc,EAAE;IACnB,IAAIH,SAAS,EAAE;MACb,MAAMR,MAAM,CAACM,IAAI,CAAC;IACpB,CAAC,MAAM,IAAI,MAAMJ,UAAU,CAACI,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIc,KAAK,CAAC,sBAAsB,CAAC;IACzC;EACF;EAEA,IAAI;IACF;IACA,MAAMxB,EAAE,CAACyB,MAAM,CAAChB,GAAG,EAAEC,IAAI,CAAC;EAC5B,CAAC,CAAC,OAAOgB,GAAG,EAAE;IACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,OAAO,EAAE;MACxB,MAAMD,GAAG;IACX;IACA,MAAME,gBAAgB,CAACnB,GAAG,EAAEC,IAAI,EAAEE,SAAS,CAAC;EAC9C;AACF;AAEA,eAAegB,gBAAgBA,CAAEnB,GAAG,EAAEC,IAAI,EAAEE,SAAS,EAAE;EACrD,MAAMD,IAAI,GAAG;IACXC,SAAS;IACTiB,YAAY,EAAE,IAAI;IAClBC,kBAAkB,EAAE;EACtB,CAAC;EAED,MAAM3B,IAAI,CAACM,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;EAC3B,OAAOP,MAAM,CAACK,GAAG,CAAC;AACpB;AAEAsB,MAAM,CAACC,OAAO,GAAGxB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}