{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst copy = require('../copy').copy;\nconst remove = require('../remove').remove;\nconst mkdirp = require('../mkdirs').mkdirp;\nconst pathExists = require('../path-exists').pathExists;\nconst stat = require('../util/stat');\nfunction move(src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  const overwrite = opts.overwrite || opts.clobber || false;\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err);\n    const {\n      srcStat,\n      isChangingCase = false\n    } = stats;\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err);\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb);\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err);\n        return doRename(src, dest, overwrite, isChangingCase, cb);\n      });\n    });\n  });\n}\nfunction isParentRoot(dest) {\n  const parent = path.dirname(dest);\n  const parsedPath = path.parse(parent);\n  return parsedPath.root === parent;\n}\nfunction doRename(src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb);\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err);\n      return rename(src, dest, overwrite, cb);\n    });\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err);\n    if (destExists) return cb(new Error('dest already exists.'));\n    return rename(src, dest, overwrite, cb);\n  });\n}\nfunction rename(src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb();\n    if (err.code !== 'EXDEV') return cb(err);\n    return moveAcrossDevice(src, dest, overwrite, cb);\n  });\n}\nfunction moveAcrossDevice(src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  };\n  copy(src, dest, opts, err => {\n    if (err) return cb(err);\n    return remove(src, cb);\n  });\n}\nmodule.exports = move;","map":{"version":3,"names":["fs","require","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","cb","overwrite","clobber","checkPaths","err","stats","srcStat","isChangingCase","checkParentPaths","isParentRoot","doRename","dirname","parent","parsedPath","parse","root","rename","destExists","Error","code","moveAcrossDevice","errorOnExist","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/move/move.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\nconst stat = require('../util/stat')\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, isChangingCase = false } = stats\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err)\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb)\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err)\n        return doRename(src, dest, overwrite, isChangingCase, cb)\n      })\n    })\n  })\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb)\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  }\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nmodule.exports = move\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}