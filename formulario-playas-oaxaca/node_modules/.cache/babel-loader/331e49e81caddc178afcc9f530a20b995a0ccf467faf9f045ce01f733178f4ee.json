{"ast":null,"code":"'use strict';\n\nconst fs = require('../fs');\nconst path = require('path');\nconst u = require('universalify').fromPromise;\nfunction getStats(src, dest, opts) {\n  const statFunc = opts.dereference ? file => fs.stat(file, {\n    bigint: true\n  }) : file => fs.lstat(file, {\n    bigint: true\n  });\n  return Promise.all([statFunc(src), statFunc(dest).catch(err => {\n    if (err.code === 'ENOENT') return null;\n    throw err;\n  })]).then(([srcStat, destStat]) => ({\n    srcStat,\n    destStat\n  }));\n}\nfunction getStatsSync(src, dest, opts) {\n  let destStat;\n  const statFunc = opts.dereference ? file => fs.statSync(file, {\n    bigint: true\n  }) : file => fs.lstatSync(file, {\n    bigint: true\n  });\n  const srcStat = statFunc(src);\n  try {\n    destStat = statFunc(dest);\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat,\n      destStat: null\n    };\n    throw err;\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\nasync function checkPaths(src, dest, funcName, opts) {\n  const {\n    srcStat,\n    destStat\n  } = await getStats(src, dest, opts);\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src);\n      const destBaseName = path.basename(dest);\n      if (funcName === 'move' && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return {\n          srcStat,\n          destStat,\n          isChangingCase: true\n        };\n      }\n      throw new Error('Source and destination must not be the same.');\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);\n    }\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\nfunction checkPathsSync(src, dest, funcName, opts) {\n  const {\n    srcStat,\n    destStat\n  } = getStatsSync(src, dest, opts);\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src);\n      const destBaseName = path.basename(dest);\n      if (funcName === 'move' && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return {\n          srcStat,\n          destStat,\n          isChangingCase: true\n        };\n      }\n      throw new Error('Source and destination must not be the same.');\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);\n    }\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths(src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  let destStat;\n  try {\n    destStat = await fs.stat(destParent, {\n      bigint: true\n    });\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return checkParentPaths(src, srcStat, destParent, funcName);\n}\nfunction checkParentPathsSync(src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  let destStat;\n  try {\n    destStat = fs.statSync(destParent, {\n      bigint: true\n    });\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName);\n}\nfunction areIdentical(srcStat, destStat) {\n  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir(src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i);\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i);\n  return srcArr.every((cur, i) => destArr[i] === cur);\n}\nfunction errMsg(src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;\n}\nmodule.exports = {\n  // checkPaths\n  checkPaths: u(checkPaths),\n  checkPathsSync,\n  // checkParent\n  checkParentPaths: u(checkParentPaths),\n  checkParentPathsSync,\n  // Misc\n  isSrcSubdir,\n  areIdentical\n};","map":{"version":3,"names":["fs","require","path","u","fromPromise","getStats","src","dest","opts","statFunc","dereference","file","stat","bigint","lstat","Promise","all","catch","err","code","then","srcStat","destStat","getStatsSync","statSync","lstatSync","checkPaths","funcName","areIdentical","srcBaseName","basename","destBaseName","toLowerCase","isChangingCase","Error","isDirectory","isSrcSubdir","errMsg","checkPathsSync","checkParentPaths","srcParent","resolve","dirname","destParent","parse","root","checkParentPathsSync","ino","dev","srcArr","split","sep","filter","i","destArr","every","cur","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/util/stat.js"],"sourcesContent":["'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst u = require('universalify').fromPromise\n\nfunction getStats (src, dest, opts) {\n  const statFunc = opts.dereference\n    ? (file) => fs.stat(file, { bigint: true })\n    : (file) => fs.lstat(file, { bigint: true })\n  return Promise.all([\n    statFunc(src),\n    statFunc(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest, opts) {\n  let destStat\n  const statFunc = opts.dereference\n    ? (file) => fs.statSync(file, { bigint: true })\n    : (file) => fs.lstatSync(file, { bigint: true })\n  const srcStat = statFunc(src)\n  try {\n    destStat = statFunc(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nasync function checkPaths (src, dest, funcName, opts) {\n  const { srcStat, destStat } = await getStats(src, dest, opts)\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return { srcStat, destStat }\n}\n\nfunction checkPathsSync (src, dest, funcName, opts) {\n  const { srcStat, destStat } = getStatsSync(src, dest, opts)\n\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n\n  let destStat\n  try {\n    destStat = await fs.stat(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return checkParentPaths(src, srcStat, destParent, funcName)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = fs.statSync(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.every((cur, i) => destArr[i] === cur)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  // checkPaths\n  checkPaths: u(checkPaths),\n  checkPathsSync,\n  // checkParent\n  checkParentPaths: u(checkParentPaths),\n  checkParentPathsSync,\n  // Misc\n  isSrcSubdir,\n  areIdentical\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}