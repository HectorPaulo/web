{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromCallback;\nconst path = require('path');\nconst fs = require('graceful-fs');\nconst mkdir = require('../mkdirs');\nconst pathExists = require('../path-exists').pathExists;\nconst {\n  areIdentical\n} = require('../util/stat');\nfunction createLink(srcpath, dstpath, callback) {\n  function makeLink(srcpath, dstpath) {\n    fs.link(srcpath, dstpath, err => {\n      if (err) return callback(err);\n      callback(null);\n    });\n  }\n  fs.lstat(dstpath, (_, dstStat) => {\n    fs.lstat(srcpath, (err, srcStat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureLink');\n        return callback(err);\n      }\n      if (dstStat && areIdentical(srcStat, dstStat)) return callback(null);\n      const dir = path.dirname(dstpath);\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err);\n        if (dirExists) return makeLink(srcpath, dstpath);\n        mkdir.mkdirs(dir, err => {\n          if (err) return callback(err);\n          makeLink(srcpath, dstpath);\n        });\n      });\n    });\n  });\n}\nfunction createLinkSync(srcpath, dstpath) {\n  let dstStat;\n  try {\n    dstStat = fs.lstatSync(dstpath);\n  } catch {}\n  try {\n    const srcStat = fs.lstatSync(srcpath);\n    if (dstStat && areIdentical(srcStat, dstStat)) return;\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink');\n    throw err;\n  }\n  const dir = path.dirname(dstpath);\n  const dirExists = fs.existsSync(dir);\n  if (dirExists) return fs.linkSync(srcpath, dstpath);\n  mkdir.mkdirsSync(dir);\n  return fs.linkSync(srcpath, dstpath);\n}\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync\n};","map":{"version":3,"names":["u","require","fromCallback","path","fs","mkdir","pathExists","areIdentical","createLink","srcpath","dstpath","callback","makeLink","link","err","lstat","_","dstStat","srcStat","message","replace","dir","dirname","dirExists","mkdirs","createLinkSync","lstatSync","existsSync","linkSync","mkdirsSync","module","exports"],"sources":["/home/paulo/.Code/web/login-estructura/login-no-funcional/node_modules/fs-extra/lib/ensure/link.js"],"sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\nconst { areIdentical } = require('../util/stat')\n\nfunction createLink (srcpath, dstpath, callback) {\n  function makeLink (srcpath, dstpath) {\n    fs.link(srcpath, dstpath, err => {\n      if (err) return callback(err)\n      callback(null)\n    })\n  }\n\n  fs.lstat(dstpath, (_, dstStat) => {\n    fs.lstat(srcpath, (err, srcStat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureLink')\n        return callback(err)\n      }\n      if (dstStat && areIdentical(srcStat, dstStat)) return callback(null)\n\n      const dir = path.dirname(dstpath)\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err)\n        if (dirExists) return makeLink(srcpath, dstpath)\n        mkdir.mkdirs(dir, err => {\n          if (err) return callback(err)\n          makeLink(srcpath, dstpath)\n        })\n      })\n    })\n  })\n}\n\nfunction createLinkSync (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = fs.lstatSync(dstpath)\n  } catch {}\n\n  try {\n    const srcStat = fs.lstatSync(srcpath)\n    if (dstStat && areIdentical(srcStat, dstStat)) return\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  const dir = path.dirname(dstpath)\n  const dirExists = fs.existsSync(dir)\n  if (dirExists) return fs.linkSync(srcpath, dstpath)\n  mkdir.mkdirsSync(dir)\n\n  return fs.linkSync(srcpath, dstpath)\n}\n\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}